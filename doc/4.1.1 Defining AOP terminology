advice, pointcuts, and join points.

the job of an aspect is called advice.
	Advice defines both the what and the when of an aspect. 
	Spring aspects can work with five kinds of advice:
	 Before—The advice functionality takes place before the advised method is invoked.
	 After—The advice functionality takes place after the advised method completes, regardless of the outcome.
	 After-returning—The advice functionality takes place after the advised method successfully completes.
	 After-throwing—The advice functionality takes place after the advised method throws an exception.
	 Around—The advice wraps the advised method, providing some functionality before and after the advised method is invoked.
	In the same way, your application may have thousands of opportunities for advice to be applied. These opportunities are known as join points. A join point is a point in he execution of the application where an aspect can be plugged in.
	If advice defines the what and when of aspects, then pointcuts define the where.  
	
execution(* com.springinaction.springidol.Instrument.play())and bean(eddie)
Here we’re saying that we want to apply aspect advice to the execution of an Instruments play() method, but limited to the bean whose ID is eddie. 
Narrowing a pointcut to a specific bean may be valuable in some cases, but we can also use negation to apply an aspect to all beans that don’t have a specific ID: 
execution(* com.springinaction.springidol.Instrument.play()) and !bean(eddie)
	